using System;
using System.IO;
using System.Drawing;
using System.Diagnostics;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace LarpIT_LX
{
    public partial class MainForm : Form
    {
        public MainForm()
        {
            InitializeComponent();
            UpdateColorTheme();
            CreateHistoryFile();
        }

        // Used for the Delete Feature
        public void CreateHistoryFile()
        {
            using (StreamWriter CreateHistory = new StreamWriter("history.txt", false))
            {
                ;
            }
        }

        // Flag used to determine if email mode is on/off
        // Default = off
        // EMode = attached the string "Email Update Below" to the work notes at the top
        bool EMode = false;

        // Clipboard.SetText(Badge, Location, Contact, Asset Tag, Main Issue, Work Notes)
        public void BadgeTextBox_MouseClick(object sender, MouseEventArgs e)
        {
            if (String.IsNullOrEmpty(BadgeTextBox.Text) == true)
            {
                ;
            }
            else
            {
                Clipboard.SetText(BadgeTextBox.Text);
            }
        }
        public void LocationTextBox_MouseClick(object sender, MouseEventArgs e)
        {
            if (String.IsNullOrEmpty(LocationTextBox.Text) == true)
            {
                ;
            }
            else
            {
                Clipboard.SetText(LocationTextBox.Text);
            }
        }
        public void ContactTextBox_MouseClick(object sender, MouseEventArgs e)
        {
            if (String.IsNullOrEmpty(ContactTextBox.Text) == true)
            {
                ;
            }
            else
            {
                Clipboard.SetText(ContactTextBox.Text);
            }
        }
        public void AssetTextBox_MouseClick(object sender, MouseEventArgs e)
        {
            if (String.IsNullOrEmpty(AssetTextBox.Text) == true)
            {
                ;
            }
            else
            {
                Clipboard.SetText(AssetTextBox.Text);
            }
        }
        public void MainIssueTextBox_MouseClick(object sender, MouseEventArgs e)
        {
            if (String.IsNullOrEmpty(MainIssueTextBox.Text) == true)
            {
                ;
            }
            else
            {
                Clipboard.SetText(MainIssueTextBox.Text);
            }
        }

        // Clipboard.SetText(Work Notes Converted to Single Lines)
        public void RichTextBox_MouseClick(object sender, MouseEventArgs e)
        {
            if (string.IsNullOrEmpty(RichTextBox.Text))
            {
                ;
            }
            else
            {
                if (EMode == false)
                {
                    string NotesConverted = Regex.Replace(RichTextBox.Text, @"(\s)\s+", "$1" + "$1");
                    Clipboard.SetText(NotesConverted);
                }
                else if (EMode == true)
                {
                    string NotesConverted = "Email Update(s) Below:\n\n" + Regex.Replace(RichTextBox.Text, @"(\s)\s+", "$1" + "$1");
                    Clipboard.SetText(NotesConverted);
                }
            }
        }

        // Clipboard.SetText(ALL LARPIT DATA)
        public void MainForm_KeyDown(object sender, KeyEventArgs e)
        {
            // CTRL + X
            if (e.Control && e.KeyCode == Keys.X)
            {
                if (VerifyCheckBox.Checked == true && LocalSupportCheckBox.Checked == true)
                {
                    if (String.IsNullOrEmpty(BadgeTextBox.Text) == true)
                    {
                        BadgeTextBox.Text = "None";
                    }
                    if (String.IsNullOrEmpty(LocationTextBox.Text) == true)
                    {
                        LocationTextBox.Text = "None";
                    }
                    if (String.IsNullOrEmpty(ContactTextBox.Text) == true)
                    {
                        ContactTextBox.Text = "None";
                    }
                    if (String.IsNullOrEmpty(AssetTextBox.Text) == true)
                    {
                        AssetTextBox.Text = "None";
                    }
                    Clipboard.SetText("Badge/Cws ID: " + BadgeTextBox.Text + "\n\n" +
                                      "Location: " + LocationTextBox.Text + "\n\n" +
                                      "Contact: " + ContactTextBox.Text + "\n\n" +
                                      "Asset: " + AssetTextBox.Text + "\n\n" +
                                      "Main Issue: " + MainIssueTextBox.Text + "\n\n" +
                                      "Verified: Yes" + "\n\n" +
                                      "Local Support: Yes");
                }
                else if (VerifyCheckBox.Checked == false && LocalSupportCheckBox.Checked == false)
                {
                    if (String.IsNullOrEmpty(BadgeTextBox.Text) == true)
                    {
                        BadgeTextBox.Text = "None";
                    }
                    if (String.IsNullOrEmpty(LocationTextBox.Text) == true)
                    {
                        LocationTextBox.Text = "None";
                    }
                    if (String.IsNullOrEmpty(ContactTextBox.Text) == true)
                    {
                        ContactTextBox.Text = "None";
                    }
                    if (String.IsNullOrEmpty(AssetTextBox.Text) == true)
                    {
                        AssetTextBox.Text = "None";
                    }
                    Clipboard.SetText("Badge/Cws ID: " + BadgeTextBox.Text + "\n\n" +
                                      "Location: " + LocationTextBox.Text + "\n\n" +
                                      "Contact: " + ContactTextBox.Text + "\n\n" +
                                      "Asset: " + AssetTextBox.Text + "\n\n" +
                                      "Main Issue: " + MainIssueTextBox.Text + "\n\n" +
                                      "Verified: No" + "\n\n" +
                                      "Local Support: No");
                }
                else if (VerifyCheckBox.Checked == true && LocalSupportCheckBox.Checked == false)
                {
                    if (String.IsNullOrEmpty(BadgeTextBox.Text) == true)
                    {
                        BadgeTextBox.Text = "None";
                    }
                    if (String.IsNullOrEmpty(LocationTextBox.Text) == true)
                    {
                        LocationTextBox.Text = "None";
                    }
                    if (String.IsNullOrEmpty(ContactTextBox.Text) == true)
                    {
                        ContactTextBox.Text = "None";
                    }
                    if (String.IsNullOrEmpty(AssetTextBox.Text) == true)
                    {
                        AssetTextBox.Text = "None";
                    }
                    Clipboard.SetText("Badge/Cws ID: " + BadgeTextBox.Text + "\n\n" +
                                      "Location: " + LocationTextBox.Text + "\n\n" +
                                      "Contact: " + ContactTextBox.Text + "\n\n" +
                                      "Asset: " + AssetTextBox.Text + "\n\n" +
                                      "Main Issue: " + MainIssueTextBox.Text + "\n\n" +
                                      "Verified: Yes" + "\n\n" +
                                      "Local Support: No");
                }
                else if (VerifyCheckBox.Checked == false && LocalSupportCheckBox.Checked == true)
                {
                    if (String.IsNullOrEmpty(BadgeTextBox.Text) == true)
                    {
                        BadgeTextBox.Text = "None";
                    }
                    if (String.IsNullOrEmpty(LocationTextBox.Text) == true)
                    {
                        LocationTextBox.Text = "None";
                    }
                    if (String.IsNullOrEmpty(ContactTextBox.Text) == true)
                    {
                        ContactTextBox.Text = "None";
                    }
                    if (String.IsNullOrEmpty(AssetTextBox.Text) == true)
                    {
                        AssetTextBox.Text = "None";
                    }
                    Clipboard.SetText("Badge/Cws ID: " + BadgeTextBox.Text + "\n\n" +
                                      "Location: " + LocationTextBox.Text + "\n\n" +
                                      "Contact: " + ContactTextBox.Text + "\n\n" +
                                      "Asset: " + AssetTextBox.Text + "\n\n" +
                                      "Main Issue: " + MainIssueTextBox.Text + "\n\n" +
                                      "Verified: No" + "\n\n" +
                                      "Local Support: Yes");
                }
            }
            else if (e.Control && e.KeyCode == Keys.N)
            {
                Process.Start("LarpIT LX.exe");
            }
            else if (e.Control && e.KeyCode == Keys.Q)
            {
                AfkLabel.Text = "AFK = ON";
                AfkLabel.ForeColor = Color.LimeGreen;
                StopSleep.Start();
            }
            else if (e.Control && e.KeyCode == Keys.W)
            {
                AfkLabel.Text = "AFK = OFF";
                AfkLabel.ForeColor = Color.Red;
                StopSleep.Stop();
            }

            // DEL function currently under construction

            //// DEL to Delete LarpIT Data
            //else if (e.KeyCode == Keys.Delete)
            //{
            //    DialogResult Window = MessageBox.Show("Clear all LarpIT Data?", "Confirmation", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Information);
            //    if (Window == DialogResult.Yes)
            //    {
            //        string DuplicateBadge = BadgeTextBox.Text;
            //        string Line;
            //        List<string> History = new List<string>();

            //        using (StreamWriter Writer = new StreamWriter("history.txt", true))
            //        {
            //            // Append LarpIT Data to History.txt
            //            Writer.WriteLine(BadgeTextBox.Text);
            //            Writer.WriteLine(LocationTextBox.Text);
            //            Writer.WriteLine(ContactTextBox.Text);
            //            Writer.WriteLine(AssetTextBox.Text);
            //            Writer.WriteLine(MainIssueTextBox.Text);
            //            Writer.WriteLine("-------------------------------------");
            //        }

            //        //
            //        //
            //        // Remove Duplicate Profiles
            //        //
            //        //

            //        try
            //        {
            //            // Load History.txt into a Vector
            //            using (StreamReader Reader = new StreamReader("history.txt"))
            //            {
            //                while ((Line = Reader.ReadLine()) != null)
            //                {
            //                    History.Add(Line);
            //                }
            //            }

            //            // Scan through History.txt and remove all duplicates from the top down
            //            for (int i = 0; i < History.Count; i++)
            //            {
            //                if (History[i] == DuplicateBadge)
            //                {
            //                    History.RemoveAt(i);
            //                    History.RemoveAt(i + 1);
            //                    History.RemoveAt(i + 2);
            //                    History.RemoveAt(i + 3);
            //                    History.RemoveAt(i + 4);
            //                    History.RemoveAt(i + 5);
            //                    break;
            //                }
            //                else
            //                {
            //                    ;
            //                }
            //            }
            //        }
            //        catch(Exception)
            //        {
            //            ;
            //        }

            //        // Write all contents of the List back into history.txt
            //        using (StreamWriter Writer = new StreamWriter("history.txt", true))
            //        {
            //            for (int i = 0; i < History.Count; i++)
            //            {
            //                Writer.WriteLine(History[i]);
            //            }
            //        }
            //    }
            //    else
            //    {
            //        ;
            //    }
            //}
        }

        // Dark Theme Tool
        public void DarkTool_Click(object sender, EventArgs e)
        {
            this.BackColor = Color.FromArgb(45, 45, 48);
            VerifyCheckBox.ForeColor = Color.White;
            LocalSupportCheckBox.ForeColor = Color.White;
            using (StreamWriter W = new StreamWriter("color.ini", false))
            {
                W.Write("d");
            }
        }

        // White Theme Tool
        public void DefaultTool_Click(object sender, EventArgs e)
        {
            this.BackColor = Color.FromArgb(255, 255, 255);
            using (StreamWriter W = new StreamWriter("color.ini", false))
            {
                W.Write("w");
            }
            VerifyCheckBox.ForeColor = Color.Red;
            LocalSupportCheckBox.ForeColor = Color.Red;
        }
        // Load Color Theme
        public void UpdateColorTheme()
        {
            try
            {
                using (StreamReader R = new StreamReader("color.ini"))
                {
                    string theme = R.ReadToEnd();
                    if (theme == "d")
                    {
                        VerifyCheckBox.ForeColor = Color.White;
                        LocalSupportCheckBox.ForeColor = Color.White;
                        this.BackColor = Color.FromArgb(45, 45, 48);
                    }
                    else if (theme == "w")
                    {
                        this.BackColor = Color.FromArgb(255, 255, 255);
                    }
                }
            }
            catch (Exception)
            {
                ;
            }
        }

        // Nhcar Tool
        public void NhcarTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                try
                {
                    string name = NhcarTextBox.Text;
                    string[] s = name.Split(' ');
                    string fname = s[0];
                    string lname = s[1];
                    if (s.Length > 2)
                    {
                        MessageBox.Show("Only 2 words accepted as input!", "String Parsing Error");
                    }
                    else
                    {
                        var date = DateTime.Now.ToString("dd/MM/yyyy");

                        // convert / to -
                        var date_new = date.Replace('/', '-');

                        string nhcar = "NHCAR_" + lname + "_" + fname + "(" + date_new.ToString() + ")";
                        Clipboard.SetText(nhcar);
                        NhcarTextBox.Clear();
                        MessageBox.Show("Copied to clipboard", "Success!");
                    }

                }
                catch (Exception)
                {
                    ;
                }
            }
        }

        // Citrix Tool
        public void CitrixTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                Clipboard.SetText("\\\\t3pnas2\\UPMProfiles\\XAProfiles\\" + CitrixTextBox.Text);
                CitrixTextBox.Clear();
                MessageBox.Show("Copied to clipboard", "Success!");
            }
        }

        // Email Tool
        public void EmailTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                string email_new = string.Empty;
                string email = EmailTextBox.Text;
                try
                {
                    for (int i = 0; i < email.Length; i++)
                    {
                        if (email[i] != '<')
                        {
                            email_new += email[i];
                        }
                        else
                        {
                            break;
                        }
                    }
                    email_new = email_new.Remove(email_new.Length - 1, 1);
                    Clipboard.SetText(email_new);
                    MessageBox.Show("Copied to Clipboard!", "Success!");
                    EmailTextBox.Clear();
                }
                catch (Exception)
                {
                    MessageBox.Show("Something went wrong...", "Error");
                }
            }
        }

        // Auto Detect Local Support in the Background
        public void AutoDetectLocalSupport_Tick(object sender, EventArgs e)
        {
            if (String.IsNullOrEmpty(LocationTextBox.Text) == true)
            {
                ;
            }
            else
            {
                string location = LocationTextBox.Text.ToLower();
                if (location.Contains("km") || location.Contains("kearny mesa") || location.Contains("kearnymesa") || location.Contains("sp") || location.Contains("skypark") || location.Contains("sky park")
                    || location.Contains("hd") || location.Contains("harbor drive") || location.Contains("harbordrive")
                    || location.Contains("desoto") || location.Contains("mabank") || location.Contains("houston") || location.Contains("channel") || location.Contains("channelview") || location.Contains("channel view")
                    || location.Contains("gardena"))
                {
                    LocalSupportCheckBox.Checked = true;
                }

            }
        }

        // Email Mode = True
        // See from Line 0 for more info on email mode
        public void EmailModeButton_Click(object sender, EventArgs e)
        {
            EMode = true;
            ELabel.Text = "Emode = ON";
            ELabel.ForeColor = Color.LimeGreen;
            MessageBox.Show("Email mode activated!", "Turned On");
        }

        public void CallModeMenu_Click(object sender, EventArgs e)
        {
            EMode = false;
            ELabel.Text = "Emode = OFF";
            ELabel.ForeColor = Color.Red;
            MessageBox.Show("Email mode de-activated!", "Turned off");
        }

        // Service Now Data Extractor
        public void RichTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            List<string> stringList = new List<string>();
            string empty = string.Empty;
            string str1 = string.Empty;
            string str2 = string.Empty;
            string str3 = string.Empty;
            if (!e.Control || e.KeyCode != Keys.S)
                return;
            using (StreamWriter streamWriter = new StreamWriter("interface.txt", false))
                streamWriter.Write(this.RichTextBox.Text);
            using (StreamReader streamReader = new StreamReader("interface.txt"))
            {
                string str4;
                while ((str4 = streamReader.ReadLine()) != null)
                    stringList.Add(str4);
            }
            for (int index1 = 0; index1 < stringList.Count; ++index1)
            {
                if (stringList[index1] == "CWS ID")
                    str1 = !(stringList[index1 + 1] != "PeopleSoft ID") ? "null" : stringList[index1 + 1];
                else if (stringList[index1] == "Work Location Description")
                    str3 = !(stringList[index1 + 1] != "Work Location Code") ? "null" : stringList[index1 + 1];
                else if (stringList[index1] == "Business phone")
                {
                    if (stringList[index1 + 1] != "Mobile phone")
                        str2 = stringList[index1 + 1];
                    else if (stringList[index1 + 2] != "Home phone")
                        str2 = stringList[index1 + 2];
                    else if (stringList[index1 + 3] != "On-Call phone 1")
                    {
                        str2 = stringList[index1 + 3];
                    }
                    else
                    {
                        for (int index2 = 0; index2 < stringList.Count; ++index2)
                        {
                            if (stringList[index2] == "Email")
                                str2 = !(stringList[index2 + 1] != "Manager") ? "No work/personal phone or email" : stringList[index2 + 1];
                        }
                    }
                }
            }
            int num = (int)MessageBox.Show(str1 + "\n" + str3 + "\n" + str2);
            this.BadgeTextBox.Text = str1;
            this.ContactTextBox.Text = str2;
            this.LocationTextBox.Text = str3;
            this.RichTextBox.Clear();
        }

        // SendKey every 300,000 ms (5 minutes) to [prevent solar sleep
        public void StopSleep_Tick(object sender, EventArgs e)
        {
            SendKeys.Send("activated...");
        }

        public void TexasMenu_Click(object sender, EventArgs e)
        {
            DateTime timeUtc = DateTime.UtcNow;
            TimeZoneInfo cstZone = TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time");
            DateTime cstTime = TimeZoneInfo.ConvertTimeFromUtc(timeUtc, cstZone);
            MessageBox.Show(cstTime.ToString());
        }

        public void CzechMenu_Click(object sender, EventArgs e)
        {
            DateTime timeUtc = DateTime.UtcNow;
            TimeZoneInfo cet = TimeZoneInfo.FindSystemTimeZoneById("Central European Standard Time");
            DateTime cetTime = TimeZoneInfo.ConvertTimeFromUtc(timeUtc, cet);
            MessageBox.Show(cetTime.ToString());
        }

        public void SingaporeMenu_Click(object sender, EventArgs e)
        {
            DateTime timeUtc = DateTime.UtcNow;
            TimeZoneInfo cet = TimeZoneInfo.FindSystemTimeZoneById("Singapore Standard Time");
            DateTime cetTime = TimeZoneInfo.ConvertTimeFromUtc(timeUtc, cet);
            MessageBox.Show(cetTime.ToString());
        }

        // Tack on D in the front of 5 digit badge id
        public void AutoBadge_Tick(object sender, EventArgs e)
        {
            if (String.IsNullOrEmpty(BadgeTextBox.Text))
            {
                ;
            }
            else if (BadgeTextBox.Text.Length == 5)
            {
                string id = "d" + BadgeTextBox.Text;
                BadgeTextBox.Text = id;
                

                // check if existing data is stored in the history.txt file
                List<string> history = new List<string>();
                string line = "";
                
                // load history.txt into a List
                using (StreamReader Reader = new StreamReader("history.txt"))
                {
                    while ((line = Reader.ReadLine())!= null)
                    {
                        history.Add(line);
                    }
                }

                // search for existing data
                for (int i = 0; i < history.Count; i++)
                {
                    // if existing data found, ask user if they want to pre-load the existing data
                    if (history[i] == id)
                    {
                        DialogResult dialogResult = MessageBox.Show("Existing data found! Would you like to pre-load the LarpIT text fields?", "Existing Data Found!", MessageBoxButtons.YesNo);
                        if (dialogResult == DialogResult.Yes)
                        {
                            BadgeTextBox.Text = id;
                            LocationTextBox.Text = history[i + 1];
                            ContactTextBox.Text = history[i + 2];
                            AssetTextBox.Text = history[i + 3];
                            break;
                        }
                        else if (dialogResult == DialogResult.No)
                        {
                            ;
                        }
                    }
                }

                // clear the history List and line string
                history.Clear();
                line = "";
            }
        }

        public void FollowUpTool_Click(object sender, EventArgs e)
        {
            Clipboard.SetText("Hello NAME,\n\nThis is Paul from Solar IT.\n\nIf you still need assistance ISSUE, please contact the solar service desk.\n\nTicket NUMBER has been created and placed on hold.\n\nBest Regards,\n\nPaul Lee - SDA\nTel: 619-595-7500");
            MessageBox.Show("Copied to clipboard!", "Success");
        }

        public void LogMeInLinkTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                Clipboard.SetText("Please open: " + LogMeInLinkTextBox.Text + ", download & run the .exe file. Also approve or press okay to any window that pops up.");
                MessageBox.Show("Copied to clipboard!", "Success");
            }
        }

        // convert email address to name
        public void BadgeTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control && e.KeyCode == Keys.R)
            {
                string email_new = string.Empty;
                string email = BadgeTextBox.Text;
                try
                {
                    for (int i = 0; i < email.Length; i++)
                    {
                        if (email[i] != '<')
                        {
                            email_new += email[i];
                        }
                        else
                        {
                            break;
                        }
                    }
                    email_new = email_new.Remove(email_new.Length - 1, 1);
                    Clipboard.SetText(email_new);
                    MessageBox.Show("Copied to Clipboard!", "Success!");
                    EmailTextBox.Clear();
                }
                catch (Exception)
                {
                    MessageBox.Show("Something went wrong...", "Error");
                }
            }
        }
    }
}
